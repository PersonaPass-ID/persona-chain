/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  PersonhoodVerifier,
  PersonhoodVerifierInterface,
} from "../../contracts/PersonhoodVerifier";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "personhoodHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "PersonhoodVerified",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getPersonhoodHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "isPersonVerified",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userPersonhoods",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "verifiedPersonhoods",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "_pA",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "_pB",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "_pC",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[1]",
        name: "_pubSignals",
        type: "uint256[1]",
      },
    ],
    name: "verifyPersonhood",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610316908161001c8239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90816303be621614610281575080632071a71314610248578063695485b3146100d15780636d285006146100965763f23a00d71461005a57600080fd5b3461009257602036600319011261009257356001600160a01b0381169081900361009257828291602094526001845220549051908152f35b8280fd5b503461009257602036600319011261009257356001600160a01b03811690819003610092578282916020945260018452205415159051908152f35b5091346101b1576101203660031901126101b15736602312156101b1576100f66102aa565b6044903682116100925784905b82821061023857505036606312156101c75761011d6102aa565b60c4913683116101db57905b8282106101df5750503660e312156101c7576101436102aa565b610104913683116101db57905b8282106101cb5750503661012312156101c75782516020948582019082821067ffffffffffffffff8311176101b45750845290610124923684116101b1575084915b8382106101a25782855160018152f35b81358152908201908201610192565b80fd5b634e487b7160e01b855260419052602484fd5b5080fd5b8135815260209182019101610150565b8380fd5b36601f830112156101db576101f26102aa565b808684013681116102345791879285949294905b80821061021e57505081529201916020019050610129565b813586526020958601958a955090910190610206565b8680fd5b8135815260209182019101610103565b503461009257602036600319011261009257356001600160a01b0381169081900361009257828291602094526001845220549051908152f35b92919050346101db5760203660031901126101db57358352602083815292205460ff1615158152f35b604051906040820182811067ffffffffffffffff8211176102ca57604052565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220937b715dc8cc17cb2d383f4302067bb2768cbfdc0db2ed3c03800e3de2a9b34564736f6c63430008140033";

type PersonhoodVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PersonhoodVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PersonhoodVerifier__factory extends ContractFactory {
  constructor(...args: PersonhoodVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      PersonhoodVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PersonhoodVerifier__factory {
    return super.connect(runner) as PersonhoodVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PersonhoodVerifierInterface {
    return new Interface(_abi) as PersonhoodVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PersonhoodVerifier {
    return new Contract(address, _abi, runner) as unknown as PersonhoodVerifier;
  }
}
