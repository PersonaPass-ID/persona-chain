/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PersonhoodVerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getPersonhoodHash"
      | "isPersonVerified"
      | "userPersonhoods"
      | "verifiedPersonhoods"
      | "verifyPersonhood"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PersonhoodVerified"): EventFragment;

  encodeFunctionData(
    functionFragment: "getPersonhoodHash",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPersonVerified",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPersonhoods",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedPersonhoods",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyPersonhood",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [BigNumberish]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPersonhoodHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPersonVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPersonhoods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedPersonhoods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyPersonhood",
    data: BytesLike
  ): Result;
}

export namespace PersonhoodVerifiedEvent {
  export type InputTuple = [
    personhoodHash: BytesLike,
    user: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    personhoodHash: string,
    user: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    personhoodHash: string;
    user: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PersonhoodVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): PersonhoodVerifier;
  waitForDeployment(): Promise<this>;

  interface: PersonhoodVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPersonhoodHash: TypedContractMethod<[user: AddressLike], [string], "view">;

  isPersonVerified: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  userPersonhoods: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  verifiedPersonhoods: TypedContractMethod<
    [arg0: BytesLike],
    [boolean],
    "view"
  >;

  verifyPersonhood: TypedContractMethod<
    [
      _pA: [BigNumberish, BigNumberish],
      _pB: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _pC: [BigNumberish, BigNumberish],
      _pubSignals: [BigNumberish]
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPersonhoodHash"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "isPersonVerified"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "userPersonhoods"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "verifiedPersonhoods"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyPersonhood"
  ): TypedContractMethod<
    [
      _pA: [BigNumberish, BigNumberish],
      _pB: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _pC: [BigNumberish, BigNumberish],
      _pubSignals: [BigNumberish]
    ],
    [boolean],
    "view"
  >;

  getEvent(
    key: "PersonhoodVerified"
  ): TypedContractEvent<
    PersonhoodVerifiedEvent.InputTuple,
    PersonhoodVerifiedEvent.OutputTuple,
    PersonhoodVerifiedEvent.OutputObject
  >;

  filters: {
    "PersonhoodVerified(bytes32,address,uint256)": TypedContractEvent<
      PersonhoodVerifiedEvent.InputTuple,
      PersonhoodVerifiedEvent.OutputTuple,
      PersonhoodVerifiedEvent.OutputObject
    >;
    PersonhoodVerified: TypedContractEvent<
      PersonhoodVerifiedEvent.InputTuple,
      PersonhoodVerifiedEvent.OutputTuple,
      PersonhoodVerifiedEvent.OutputObject
    >;
  };
}
