service: persona-identity-api

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'prod'}
  environment:
    DYNAMODB_TABLE_NAME: persona-credentials-${self:provider.stage}
    BLOCKCHAIN_RPC_URL: http://161.35.2.88:26657
    JWT_SECRET: ${env:JWT_SECRET, 'persona-super-secure-jwt-secret-key'}
    ENCRYPTION_KEY: ${env:ENCRYPTION_KEY, 'persona-32-char-encryption-key-123'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NAME}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NAME}/index/*"

functions:
  createDID:
    handler: src/lambda/create-did.handler
    events:
      - http:
          path: /api/did/create
          method: post
          cors: true
          
  verifyCredential:
    handler: src/lambda/verify-credential.handler
    events:
      - http:
          path: /api/verify
          method: post
          cors: true
          
  issueCredential:
    handler: src/lambda/issue-credential.handler
    events:
      - http:
          path: /api/issue
          method: post
          cors: true
          
  getCredentials:
    handler: src/lambda/get-credentials.handler
    events:
      - http:
          path: /api/credentials/{walletAddress}
          method: get
          cors: true

  healthCheck:
    handler: src/lambda/health.handler
    events:
      - http:
          path: /health
          method: get
          cors: true

  # Email Verification Endpoints
  startEmailVerification:
    handler: src/lambda/email-verification-start.handler
    events:
      - http:
          path: /issue-vc/email/start
          method: post
          cors: true
    environment:
      SENDGRID_API_KEY: ${env:SENDGRID_API_KEY, 'not-configured'}

  verifyEmailCode:
    handler: src/lambda/email-verification-verify.handler
    events:
      - http:
          path: /issue-vc/email/verify
          method: post
          cors: true
    environment:
      SENDGRID_API_KEY: ${env:SENDGRID_API_KEY, 'not-configured'}

  # Phone Verification Endpoints  
  startPhoneVerification:
    handler: src/lambda/phone-verification-start.handler
    events:
      - http:
          path: /issue-vc/phone/start
          method: post
          cors: true
    environment:
      AWS_SNS_REGION: ${env:AWS_SNS_REGION, 'us-east-1'}

  verifyPhoneCode:
    handler: src/lambda/phone-verification-verify.handler
    events:
      - http:
          path: /issue-vc/phone/verify
          method: post
          cors: true
    environment:
      AWS_SNS_REGION: ${env:AWS_SNS_REGION, 'us-east-1'}

  # Password Authentication Endpoints
  createAccount:
    handler: src/lambda/auth-create-account.handler
    events:
      - http:
          path: /auth/create-account
          method: post
          cors: true
    environment:
      JWT_SECRET: ${env:JWT_SECRET, 'persona-super-secure-jwt-secret-key'}

  loginAccount:
    handler: src/lambda/auth-login.handler
    events:
      - http:
          path: /auth/login
          method: post
          cors: true
    environment:
      JWT_SECRET: ${env:JWT_SECRET, 'persona-super-secure-jwt-secret-key'}

  verifyToken:
    handler: src/lambda/auth-verify-token.handler
    events:
      - http:
          path: /auth/verify-token
          method: post
          cors: true
    environment:
      JWT_SECRET: ${env:JWT_SECRET, 'persona-super-secure-jwt-secret-key'}

resources:
  Resources:
    PersonaCredentialsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: persona-credentials-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: walletAddress
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: WalletAddressIndex
            KeySchema:
              - AttributeName: walletAddress
                KeyType: HASH
            Projection:
              ProjectionType: ALL

plugins:
  - serverless-plugin-typescript