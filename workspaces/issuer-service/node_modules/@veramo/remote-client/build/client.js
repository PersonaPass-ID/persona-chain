"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentRestClient = void 0;
require("cross-fetch/polyfill");
/**
 * This plugin can be used to access the methods of a remote Veramo agent as if they were implemented locally.
 *
 * The remote agent should be provided by {@link @veramo/remote-server#AgentRouter | AgentRouter}, or a similar
 * implementation of this API.
 *
 * The schema of the remote agent is usually provided by {@link @veramo/remote-server#ApiSchemaRouter |
 * ApiSchemaRouter}.
 *
 * @public
 */
class AgentRestClient {
    constructor(options) {
        this.methods = {};
        this.url = options.url;
        this.schema = options.schema;
        for (const method of options.enabledMethods) {
            this.methods[method] = (args) => __awaiter(this, void 0, void 0, function* () {
                const res = yield fetch(this.url + '/' + method, {
                    headers: Object.assign(Object.assign({}, options.headers), { 'Content-Type': 'application/json' }),
                    method: 'post',
                    body: JSON.stringify(args),
                });
                const json = yield res.json();
                if (res.status >= 400) {
                    throw Error(json.error);
                }
                return json;
            });
        }
    }
}
exports.AgentRestClient = AgentRestClient;
//# sourceMappingURL=client.js.map