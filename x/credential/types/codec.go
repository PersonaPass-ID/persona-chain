package types

import (
	"context"

	"github.com/cosmos/cosmos-sdk/codec"
	"github.com/cosmos/cosmos-sdk/codec/legacy"
	cdctypes "github.com/cosmos/cosmos-sdk/codec/types"
	sdk "github.com/cosmos/cosmos-sdk/types"
)

const (
	// RouterKey is the message route for the credential module
	RouterKey = ModuleName
)

// RegisterCodec registers the credential module's types on the given LegacyAmino codec.
func RegisterCodec(cdc *codec.LegacyAmino) {
	cdc.RegisterConcrete(&MsgCreateCredential{}, "credential/CreateCredential", nil)
	cdc.RegisterConcrete(&MsgRevokeCredential{}, "credential/RevokeCredential", nil)
	cdc.RegisterConcrete(&MsgCreatePresentation{}, "credential/CreatePresentation", nil)
}

// RegisterInterfaces registers the credential module's interface types.
func RegisterInterfaces(registry cdctypes.InterfaceRegistry) {
	registry.RegisterImplementations((*sdk.Msg)(nil),
		&MsgCreateCredential{},
		&MsgRevokeCredential{},
		&MsgCreatePresentation{},
	)

	// Message service registration handled by generated proto code
}

// ModuleCdc references the global credential module codec. Note, the codec should
// ONLY be used in certain instances of tests and for JSON encoding as Amino is
// still used for that purpose.
var (
	amino     = codec.NewLegacyAmino()
	ModuleCdc = codec.NewAminoCodec(amino)
)

func init() {
	RegisterCodec(amino)
	sdk.RegisterLegacyAminoCodec(amino)

	// Register all Amino interfaces and concrete types on the authz Amino codec so that this can later be
	// used to properly serialize MsgGrant and MsgExec instances
	RegisterCodec(legacy.Cdc)
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateCredential creates a new verifiable credential
	CreateCredential(ctx context.Context, req *MsgCreateCredential) (*MsgCreateCredentialResponse, error)
	// RevokeCredential revokes an existing credential
	RevokeCredential(ctx context.Context, req *MsgRevokeCredential) (*MsgRevokeCredentialResponse, error)
	// CreatePresentation creates a new verifiable presentation
	CreatePresentation(ctx context.Context, req *MsgCreatePresentation) (*MsgCreatePresentationResponse, error)
}

// RegisterMsgServer is a placeholder - normally would be generated by protobuf
// For now we'll skip this since we're using manual message server registration
func RegisterMsgServer(s interface{}, srv MsgServer) {
	// This will be implemented when we have proper proto generation
}

// _Msg_serviceDesc is a service descriptor for the Msg service
var _Msg_serviceDesc = struct{}{}